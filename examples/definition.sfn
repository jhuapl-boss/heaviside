"""State machine comment"""

version: "1.0"
timeout: 60

# ====== #
# States #
# ====== #


Pass() # Do nothing state. Can be used to modify / inject data
    """Function Name
    Comments go here"""
    input: '$.input'
    result: '$.results'
    output: '$.output'
    data: # only for Pass states
        { 'a': 'a', 'b': true, 'c': False, 'd': null }

Lambda('FUNCTION_NAME')
    """Lambda
    FUNCTION_NAME is used to create actual ARN
    input / results / output / data are all valid"""
    timeout: 60 # Lambda / Activity only
    heartbeat: 30 # Lambda / Activity only, must be less than timeout
    retry ["Error(s)"] 1 0 1.0 # retry interval (seconds), max attempts, backoff rate
    retry [] 1 0 1.0 # Empty error to match all errors (Same as State.ALL)
    catch ["Error(s)"]:
        Pass()
    catch []: # Same as above
        Pass()

# Activity / Lambda ARNs can be just the function name, the whole, or
#                        a partial end of the ARN (and the rest will be added)
Activity('us-east-1:123456:activity:FUNCTION_NAME')
    # Activities are non-lambda functions that can run on EC2, ECS or anywhere else
    # The code just polls AWS to see if there is work available
    timeout: 2
    heartbeat: 1
    input: '$.foo'
    result: '$.foo'
    output: '$.foo'
    retry "one" 1 1 1
    retry ['two'] 1 1 1
    catch 'one':
        Pass()
    catch ['two']: '$.foo'
        Success()

# Four different versions of a sleep function
# input / output are valid
Wait(seconds=30)
#Wait(timestamp='yyyy-mm-ddThh:mm:ssZ') # RFC3339 formatted
Wait(timestamp='1111-11-11T11:11:11Z')
Wait(seconds_path='$.seconds')
Wait(timestamp_path='$.timestamp')


# ============ #
# Flow Control #
# ============ #

# Comparison operators
# ==, != for boolean
# ==, !=, <, >, <=, >= for int/float/string/timestamp
# Note: A timestamp is determined by trying to parse the string into the correct formatted
# not, and, or are also supported with the written precedence
# () are supported

# if / elif / else becomes a Choice State
if '$.a' == '1111-11-11T11:11:11Z' or \
   '$.a' == 1:
    Pass()
elif '$.foo' == 1:
    """If-Elif-Else"""
    Pass()
elif '$.foo' <= 1:
    Pass()
elif '$.foo' < 1:
    Pass()
elif '$.foo' >= 1:
    Pass()
elif '$.foo' > 1:
    Pass()
elif '$.foo' != 1:
    Pass()
elif '$.foo' == '1':
    Pass()
elif '$.foo' <= '1':
    Pass()
elif '$.foo' < '1':
    Pass()
elif '$.foo' >= '1':
    Pass()
elif '$.foo' > '1':
    Pass()
elif '$.foo' != '1':
    Pass()
elif '$.foo' == true:
    Pass()
elif '$.foo' != true:
    Pass()
elif '$.foo' == '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' <= '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' < '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' >= '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' > '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' != '1111-11-11T11:11:11Z':
    Pass()
else:
    Pass()
transform:
    output: '$.foo'

# while loop becomes a Choice State
while '$.foo' == False:
    """While"""
    Pass()
        """While-Body"""
transform:
    input: '$.foo'
    result: '$.foo'
    output: '$.foo'

# switch statement becomes a Choice State
# that only handles '==' cases
switch '$.a':
    case 1:
        Pass()
    case 'foo':
        Pass()
    case '1111-11-11T11:11:11Z':
        Pass()
    default:
        Pass()
transform:
    output: '$.foo'

# parallel executes multiple branches in parallel
# the errors block applies to the whole parallel
# state (all of the branches together)
parallel:
    """Parallel Name
    Only comments / step name from the first parallel block is used"""
    Success()
        """Success
        Comment"""
        input: '$.foo'
        output: '$.foo'

parallel:
    Fail('error', 'cause')
        """Fail
        Comment"""
transform:
    input: '$.foo'
error:
    retry [] 1 0 0.0
    catch []:
        Pass()
